WAComponent subclass: #CuoOraAplicationComponent	instanceVariableNames: 'CuOOraApp nameUsuario clave display userLogueado error preguntasComponent'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-OO2-aplicacion'!!CuoOraAplicationComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	sistemaCuoOra:		<Object>    Implementation Points!!CuoOraAplicationComponent methodsFor: 'initialization' stamp: 'cathy 5/10/2019 16:55'!initialize	| cat alex pepe top1 topicos pre |	super initialize.	CuOOraApp := CuOOra singleton.	CuOOraApp usuarios: OrderedCollection new. "para resetear usus"	cat:=CuOOraApp crearNuevoUsuario: 'cathy' password: '123'.	alex:=CuOOraApp crearNuevoUsuario: 'alex' password: '123'.	pepe:=CuOOraApp crearNuevoUsuario: 'pepe' password: '123'.	CuOOraApp agregarUsuario: cat comoFollowerDe: alex.	CuOOraApp agregarUsuario: alex comoFollowerDe: cat.	CuOOraApp agregarUsuario: cat comoFollowerDe: pepe.	top1:= Topico crearTopico: 'toto' y: 'hahaha'.	topicos :=OrderedCollection new.	topicos add:top1.	CuOOraApp agregarTopicoInteresAUsuario: cat con: top1.	pre:=CuOOraApp agregarPregunta: '¿que?' de:cat conDescrip: 'bhvh' conTopicos: topicos.	CuOOraApp agregarPregunta: '¿what?' de:cat conDescrip: 'bhvh' conTopicos: topicos.	CuOOraApp agregarPregunta: '¿que?' de:alex conDescrip: 'bhvh' conTopicos: topicos.	CuOOraApp agregarPregunta: '¿que?' de:alex conDescrip: 'bhvh' conTopicos: topicos.	CuOOraApp agregarRespuesta:'cualca' de:pre deUser:cat.	display := true.	nameUsuario := ''.	clave:=''.	error:= nil.	userLogueado := nil.! !!CuoOraAplicationComponent methodsFor: 'accessing' stamp: 'alex 4/24/2019 13:41'!userLogueado	^ userLogueado! !!CuoOraAplicationComponent methodsFor: 'accessing' stamp: 'alex 4/23/2019 16:36'!nameUsuario ^ nameUsuario ! !!CuoOraAplicationComponent methodsFor: 'accessing' stamp: 'alex 4/24/2019 14:06'!userLogueado: anObject	userLogueado := anObject! !!CuoOraAplicationComponent methodsFor: 'accessing' stamp: 'alex 4/24/2019 14:06'!clave: anObject	clave := anObject! !!CuoOraAplicationComponent methodsFor: 'accessing' stamp: 'alex 4/24/2019 11:41'!display	^ display! !!CuoOraAplicationComponent methodsFor: 'accessing' stamp: 'alex 4/22/2019 22:48'!clave	^clave! !!CuoOraAplicationComponent methodsFor: 'accessing' stamp: 'alex 4/24/2019 14:06'!cuOOraApp: anObject	CuOOraApp := anObject! !!CuoOraAplicationComponent methodsFor: 'accessing' stamp: 'alex 4/24/2019 14:06'!nameUsuario: anObject	nameUsuario := anObject! !!CuoOraAplicationComponent methodsFor: 'accessing' stamp: 'alex 4/25/2019 11:56'!home:html		error ifNotNil: [ html tbsAlert beDanger with: error ].	html tbsRow		with: [ html tbsColumn				mediumSize: 4;				mediumOffset: 4;				with: [ html						form: [ html								tbsFormGroup: [ html label with: 'Nombre de Usuario'.									html textInput tbsFormControl on: #nameUsuario of: self.									html label with: 'Contraseña'.									html passwordInput tbsFormControl  on:#clave of: self.									html tbsRow										with: [ html tbsColumn												mediumSize: 10;												mediumOffset: 0;												with: [ html														form: [ html tbsButton																bePrimary;																beLarge;																callback: [ self login ];																with: 'Iniciar Sesion' ].														 html														 form: [ html tbsButton																callback: [ self register ];																with: '¿Aun no esta registrado?. Registrarse' ].														 														 ] ] ] ] ] ]! !!CuoOraAplicationComponent methodsFor: 'accessing' stamp: 'alex 4/24/2019 11:45'!display: anObject	display := anObject! !!CuoOraAplicationComponent methodsFor: 'accessing' stamp: 'alex 4/23/2019 16:04'!usuario ^ nameUsuario ! !!CuoOraAplicationComponent methodsFor: 'private protocol' stamp: 'cathy 5/7/2019 16:22'!login	(nameUsuario isEmpty  | clave isEmpty ) ifTrue:[error:= 'Debe completar los campos']	                             														ifFalse:[userLogueado := (self cuooraApp usuarios detect:[:unUsuario | unUsuario isUser: nameUsuario  pass:clave  ]"busco el usuario logueado"ifNone:[nil] ).		        userLogueado ifNotNil:[ error:= nil. "no tengo errores"			preguntasComponent := ListadoPreguntasComponent nuevoListadoUsuario: userLogueado  con: CuOOraApp.			                             self display:false "renderizar mis preguntas".			                              ]	                                   ifNil:[error:='El nombre de usuario o la contraseña son incorrectos']].	! !!CuoOraAplicationComponent methodsFor: 'rendering' stamp: 'cathy 5/6/2019 18:05'!renderContentOn: html	html tbsNavbar beDefault with: [ 		html tbsNavbarHeader: [ html tbsNavbarBrand: 'CuOOra'  ].			userLogueado ifNotNil: [ 		html tbsNavbarText tbsPullRight 			with: [ html text: userLogueado nombreUsuario. 				     html tbsNavbarLink: '    Logout' ]]].		self display ifTrue: [ self home: html ]"renderizo la vista de home, es decir el login"	             ifFalse:[preguntasComponent  renderOn:html]						! !!CuoOraAplicationComponent methodsFor: 'rendering' stamp: 'alex 4/24/2019 11:54'!cuooraApp ^ CuOOraApp ! !!CuoOraAplicationComponent methodsFor: 'rendering' stamp: 'vs 4/22/2019 15:15'!agregarPreg:html	html heading level: 2; with: 'CuOOra'.html heading level: 4; with: 'Nueva Pregunta'.	html tbsFormGroup: [ 		html label for: 'titulo'; with: 'Titulo'.		html textInput tbsFormControl; id: 'titulo'; placeholder: 'titulo'].	html tbsFormGroup: [ 		html label for: 'descripcion'; with: 'Descripcion'.		html textArea tbsFormControl; id: 'descripcion'; placeholder: 'descripcion' ].		html tbsFormGroup: [ 		html label for: 'topicos'; with: 'Topicos'.		html textInput tbsFormControl; id: 'topicos'; placeholder: 'topicos'].		html form: [ html tbsButton					      bePrimary;							beLarge;							callback: [  ];							with:'Guardar'] 	! !!CuoOraAplicationComponent methodsFor: 'tools registry' stamp: 'alex 4/24/2019 11:13'!register	| nuevo |	nuevo := RegisterComponent onNewUser.	self call: nuevo.	nuevo usuario		ifNotNil: [ 			self cuooraApp crearNuevoUsuario: nuevo usuario nombreUsuario  password: nuevo usuario passwordUsuario ].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CuoOraAplicationComponent class	instanceVariableNames: ''!!CuoOraAplicationComponent class methodsFor: 'testing' stamp: 'FirstnameLastname 4/15/2019 17:43'!initialize	self register! !!CuoOraAplicationComponent class methodsFor: 'testing' stamp: 'FirstnameLastname 4/15/2019 17:43'!canBeRoot	^ true! !!CuoOraAplicationComponent class methodsFor: 'testing' stamp: 'vs 4/16/2019 16:31'!register	| cuOOra  |	cuOOra := WAAdmin register: self asApplicationAt: 'CuOOra'.	cuOOra 		addLibrary: JQDeploymentLibrary;		addLibrary: TBSDevelopmentLibrary;		addLibrary: TBSExamplesLibrary;		addLibrary: TBSJasnyDeploymentLibrary;		addLibrary: TBSVerticalTabsDeploymentLibrary! !WAComponent subclass: #FormularioPreguntasComponent	instanceVariableNames: 'tituloPreg descripcionPreg topicosPreg msjError top titulo'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-OO2-aplicacion'!!FormularioPreguntasComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!FormularioPreguntasComponent methodsFor: 'accessing' stamp: 'alex 5/3/2019 17:02'!titulo	^ titulo! !!FormularioPreguntasComponent methodsFor: 'accessing' stamp: 'alex 5/3/2019 17:02'!topicos	^ topicos! !!FormularioPreguntasComponent methodsFor: 'accessing' stamp: 'cathy 5/6/2019 19:58'!save|topnew|	(tituloPreg  isEmpty) ifTrue:[ msjError := 'Debe completar los campos' ]	                  ifFalse:[											topnew :=Topico crearTopico:topicosPreg  y:''.										top add:topnew.			                      self answer].! !!FormularioPreguntasComponent methodsFor: 'accessing' stamp: 'alex 5/3/2019 17:45'!tituloPreg: anObject	tituloPreg := anObject! !!FormularioPreguntasComponent methodsFor: 'accessing' stamp: 'alex 5/3/2019 17:18'!pregunta	^ pregunta! !!FormularioPreguntasComponent methodsFor: 'accessing' stamp: 'alex 5/3/2019 17:45'!descripcionPreg: anObject	descripcionPreg := anObject! !!FormularioPreguntasComponent methodsFor: 'accessing' stamp: 'alex 5/3/2019 17:18'!pregunta: anObject	pregunta := anObject! !!FormularioPreguntasComponent methodsFor: 'accessing' stamp: 'cathy 5/6/2019 18:31'!top: anObject	top := anObject! !!FormularioPreguntasComponent methodsFor: 'accessing' stamp: 'alex 5/3/2019 17:45'!topicosPreg	^ topicosPreg! !!FormularioPreguntasComponent methodsFor: 'accessing' stamp: 'alex 5/3/2019 17:45'!descripcionPreg	^ descripcionPreg! !!FormularioPreguntasComponent methodsFor: 'accessing' stamp: 'alex 5/3/2019 17:45'!topicosPreg: anObject	topicosPreg := anObject! !!FormularioPreguntasComponent methodsFor: 'accessing' stamp: 'cathy 5/6/2019 18:31'!top	^ top! !!FormularioPreguntasComponent methodsFor: 'accessing' stamp: 'alex 5/3/2019 17:02'!topicos: anObject	topicos := anObject! !!FormularioPreguntasComponent methodsFor: 'accessing' stamp: 'alex 5/3/2019 17:45'!tituloPreg	^ tituloPreg! !!FormularioPreguntasComponent methodsFor: 'accessing' stamp: 'alex 5/3/2019 17:18'!msjError	^ msjError! !!FormularioPreguntasComponent methodsFor: 'accessing' stamp: 'cathy 5/6/2019 18:38'!initializeWhit:aPreg tituloPreg :=''. descripcionPreg  := ''. topicosPreg  := ''. msjError := nil. top:=OrderedCollection new.! !!FormularioPreguntasComponent methodsFor: 'accessing' stamp: 'alex 5/3/2019 17:18'!msjError: anObject	msjError := anObject! !!FormularioPreguntasComponent methodsFor: 'as yet unclassified' stamp: 'alex 5/3/2019 17:21'!cancelar  self pregunta: nil.  self answer. ! !!FormularioPreguntasComponent methodsFor: 'rendering' stamp: 'alex 5/3/2019 17:44'!renderContentOn:html		html tbsRow		with: [ html tbsColumn				mediumSize: 4;				mediumOffset: 4;				with: [ html						form: [ html								tbsFormGroup: [ html label with: 'Titulo'.									html textInput tbsFormControl on:#tituloPreg of: self.									html label with: 'descripcion'.									html textArea tbsFormControl on:#descripcionPreg of: self.									html label with: 'topicos'.									html textArea tbsFormControl on:#topicosPreg of: self.									html tbsRow with: [ html tbsColumn												mediumSize: 10;												mediumOffset: 0;												with: [ html														form: [ html tbsButton																bePrimary;																beLarge;																callback: [ self save ];																with: 'Guardar' ] ] ]] ] ] ]	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FormularioPreguntasComponent class	instanceVariableNames: ''!!FormularioPreguntasComponent class methodsFor: 'creation' stamp: 'alex 5/3/2019 16:19'!onNewQuestion:usuLog 	^ self new initializeWhit: (Pregunta crearPregunta:''  deUser:usuLog  yDescrip:''  conTopicos:'' ).! !WAComponent subclass: #ListadoPreguntasComponent	instanceVariableNames: 'userLogueado preguntas cuooraApp'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-OO2-aplicacion'!!ListadoPreguntasComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	CuOOraApp:		<Object>	clave:		<Object>	display:		<Object>	error:		<Object>	nameUsuario:		<Object>	userLogueado:		<Object>    Implementation Points!!ListadoPreguntasComponent methodsFor: 'rendering' stamp: 'cathy 5/10/2019 16:56'!renderContentOn:html	|data headerBlock tableBlock|	data:= self preguntas.	html tbsRow 		with: [ html tbsColumn: [ html heading level: 2; 				                    with: 'Últimas Preguntas'] mediumSize: 10.				 html tbsColumn: [html form: [html tbsFormGroup: [html form: [ html tbsButton bePrimary 																callback: [ self nuevaPregunta ];																with: 'Hacer una nueva pregunta'  ]]]														       ] mediumSize: 2].												headerBlock := [ 			html tableHeading: '#'.			html tableHeading: 'First Name'.			html tableHeading: 'Last Name'.			html tableHeading: 'Username' ].		html text: (self cuooraApp obtenerPreguntasRelevantesPara: userLogueado) size .		html text: (self userLogueado seguidores size).		html text: ((self userLogueado seguidores flatCollect: [:u | u preguntasRealizadas ] )size).		"html text: ((self cuooraApp obtenerRespuestasDeUnaPregunta: data ) size)."	tableBlock := [ 			html tableHead: (headerBlock).		html tableBody: [ 			(self cuooraApp obtenerPreguntasRelevantesPara: userLogueado ) do: [:row | html tableRow: [html tableData: row titulo, row descripcion, row usuarioCreador nombreUsuario, row respuestas ]]]].	html tbsTable: tableBlock.! !!ListadoPreguntasComponent methodsFor: 'accessing' stamp: 'cathy 5/6/2019 18:10'!cuooraApp	^ cuooraApp! !!ListadoPreguntasComponent methodsFor: 'accessing' stamp: 'alex 4/24/2019 13:56'!preguntas	^ preguntas! !!ListadoPreguntasComponent methodsFor: 'accessing' stamp: 'alex 4/24/2019 13:56'!userLogueado	^ userLogueado! !!ListadoPreguntasComponent methodsFor: 'accessing' stamp: 'cathy 5/6/2019 17:57'!userLogueado: anObject	userLogueado := anObject! !!ListadoPreguntasComponent methodsFor: 'accessing' stamp: 'cathy 5/6/2019 18:10'!cuooraApp: anObject	cuooraApp := anObject! !!ListadoPreguntasComponent methodsFor: 'accessing' stamp: 'cathy 5/6/2019 17:57'!preguntas: anObject	preguntas := anObject! !!ListadoPreguntasComponent methodsFor: 'accessing' stamp: 'cathy 5/6/2019 18:30'!nuevaPregunta	| nuevo |	nuevo := FormularioPreguntasComponent onNewQuestion:self userLogueado.	self call: nuevo.	self cuooraApp agregarPregunta: nuevo tituloPreg  de: userLogueado  conDescrip: nuevo descripcionPreg  conTopicos: nuevo top.		! !!ListadoPreguntasComponent methodsFor: 'initialization' stamp: 'cathy 5/6/2019 18:09'!initializeUser:userLogin con:cuooraList	userLogueado := userLogin.	cuooraApp := cuooraList. ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ListadoPreguntasComponent class	instanceVariableNames: ''!!ListadoPreguntasComponent class methodsFor: 'as yet unclassified' stamp: 'cathy 5/6/2019 18:10'!nuevoListadoUsuario:usuario con:cuooraList	^ self new initializeUser: usuario con:cuooraList.	! !WAComponent subclass: #RegisterComponent	instanceVariableNames: 'nameUsuario clave usuario msjError'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-OO2-aplicacion'!!RegisterComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	clave:		<Object>	usuario:		<Object>    Implementation Points!!RegisterComponent methodsFor: 'accessing' stamp: 'alex 4/24/2019 10:48'!usuario: anObject	usuario := anObject! !!RegisterComponent methodsFor: 'accessing' stamp: 'alex 4/24/2019 10:48'!nameUsuario: anObject	nameUsuario := anObject! !!RegisterComponent methodsFor: 'accessing' stamp: 'alex 4/23/2019 16:32'!usuario	^ usuario ! !!RegisterComponent methodsFor: 'accessing' stamp: 'alex 4/23/2019 16:05'!nameUsuario	^ nameUsuario! !!RegisterComponent methodsFor: 'accessing' stamp: 'alex 4/24/2019 10:48'!clave: anObject	clave := anObject! !!RegisterComponent methodsFor: 'accessing' stamp: 'alex 4/22/2019 23:53'!clave	^ clave! !!RegisterComponent methodsFor: 'accessing' stamp: 'alex 4/23/2019 16:05'!msjError	^ msjError! !!RegisterComponent methodsFor: 'accessing' stamp: 'alex 4/23/2019 16:05'!msjError: anObject	msjError := anObject! !!RegisterComponent methodsFor: 'rendering' stamp: 'alex 4/24/2019 10:45'!renderContentOn: html		html tbsNavbar beDefault with: [ 		html tbsNavbarBrand			with: 'CuOOra'].	html heading		level: 2;		with: 'Registrarme'.	msjError  ifNotNil: [ html tbsAlert beDanger with: msjError  ].	html tbsRow		with: [ html tbsColumn				mediumSize: 4;				mediumOffset: 4;				with: [ html						form: [ html								tbsFormGroup: [ html label with: 'Nombre De Usuario'.									html textInput tbsFormControl on:#nameUsuario of: self.									html label with: 'Contraseña'.									html passwordInput tbsFormControl on:#clave of: self.									html tbsRow										with: [ html tbsColumn												mediumSize: 10;												mediumOffset: 0;												with: [ html														form: [ html tbsButton																bePrimary;																beLarge;																callback: [ self save ];																with: 'Registrame' ] ] ] ] ] ] ]! !!RegisterComponent methodsFor: 'rendering' stamp: 'alex 4/25/2019 11:21'!save	(nameUsuario isEmpty | clave isEmpty ) ifTrue: [ msjError := 'Debe completar los campos' ]	                                   ifFalse:[	self usuario nombreUsuario:nameUsuario.																self usuario passwordUsuario: clave.			                                        self answer].		 	! !!RegisterComponent methodsFor: 'initialization' stamp: 'alex 4/24/2019 10:50'!initializeWhit:user	nameUsuario:= ''.	clave:= ''.	usuario:= user.	msjError:= nil.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RegisterComponent class	instanceVariableNames: ''!!RegisterComponent class methodsFor: 'instance creation' stamp: 'alex 4/25/2019 11:04'!onNewUser	^ self new initializeWhit: (Usuario nuevoUsusario: ' ' conPassword: ' ').! !CuoOraAplicationComponent initialize!Object subclass: #Accion	instanceVariableNames: 'horaAccion fechaAccion eventos esPregunta usuarioCreador'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-OO2-modelo'!!Accion commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	fecha:		<Object>	hora:		<Object>    Implementation Points!!Accion methodsFor: 'Accessing' stamp: 'Anonymous 4/7/2019 10:13'!obtenerTodasLasRespuestas	^self subclassResponsibility ! !!Accion methodsFor: 'Accessing' stamp: 'cathy 4/3/2019 18:48'!agregarEventos:unEvento	self eventos add:unEvento.! !!Accion methodsFor: 'Accessing' stamp: 'Anonymous 4/4/2019 19:21'!topicoBuscado: unTopico	^self subclassResponsibility ! !!Accion methodsFor: 'Accessing' stamp: 'Anonymous 4/7/2019 10:38'!eliminarTodasLasRespuestas	^self subclassResponsibility ! !!Accion methodsFor: 'initalize' stamp: 'FirstnameLastname 4/21/2019 14:41'!initialize: aUser	 horaAccion:= DateAndTime .	 fechaAccion := Date today.	 eventos := OrderedCollection new.	 esPregunta := ''.	 usuarioCreador := aUser.! !!Accion methodsFor: 'accessing' stamp: 'cathy 5/10/2019 15:59'!usuarioCreador	^ usuarioCreador! !!Accion methodsFor: 'accessing' stamp: 'FirstnameLastname 4/27/2019 17:20'!esPregunta	^self subclassResponsibility .! !!Accion methodsFor: 'accessing' stamp: 'cathy 5/10/2019 15:59'!fechaAccion	^ fechaAccion! !!Accion methodsFor: 'accessing' stamp: 'Anonymous 4/6/2019 13:09'!hora	^ horaAccion ! !!Accion methodsFor: 'accessing' stamp: 'cathy 4/3/2019 18:48'!eventos	^ eventos! !!Accion methodsFor: 'accessing' stamp: 'cathy 5/10/2019 15:59'!eventos: anObject	eventos := anObject! !!Accion methodsFor: 'accessing' stamp: 'cathy 5/10/2019 15:59'!usuarioCreador: anObject	usuarioCreador := anObject! !!Accion methodsFor: 'accessing' stamp: 'cathy 5/10/2019 15:59'!esPregunta1	^ esPregunta! !!Accion methodsFor: 'accessing' stamp: 'cathy 5/10/2019 15:59'!horaAccion: anObject	horaAccion := anObject! !!Accion methodsFor: 'accessing' stamp: 'cathy 5/10/2019 15:59'!esPregunta: anObject	esPregunta := anObject! !!Accion methodsFor: 'accessing' stamp: 'cathy 5/10/2019 15:59'!fechaAccion: anObject	fechaAccion := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Accion class	instanceVariableNames: ''!!Accion class methodsFor: 'construction' stamp: 'FirstnameLastname 4/21/2019 14:47'!nuevo:aUser  ^self new initialize: aUser.! !Object subclass: #CuOOra	instanceVariableNames: 'usuarios nombre topicosSistema'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-OO2-modelo'!!CuOOra commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	topicos:		<Object>	usuarios:		<Object>    Implementation Points!!CuOOra methodsFor: 'initialization' stamp: 'FirstnameLastname 4/21/2019 11:08'!initialize		usuarios := OrderedCollection new.	topicosSistema := OrderedCollection new.! !!CuOOra methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 4/23/2019 09:30'!agregarTopicoInteresAUsuario:aUser con:aTopic	aUser agregarTopicoInteres:aTopic.		 ! !!CuOOra methodsFor: 'as yet unclassified' stamp: 'vs 4/29/2019 15:59'!agregarPregunta:unaPregunta de:aUser conDescrip: aDescrip conTopicos: unosTopicos"Agrega una pregunta indicando los tópicos a las que se relaciona (al menos uno),un título, una descripción de la pregunta. Debe registrarse el usuario que la realiza y hora y fecha de creación"	|preg|	preg:=Pregunta crearPregunta: unaPregunta deUser: aUser yDescrip:aDescrip conTopicos: unosTopicos.	unosTopicos do:[:topic | topic agregarPreg: preg].		(aUser agregarPreguntaALaColeccion:preg).	^preg.			 ! !!CuOOra methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 4/23/2019 09:23'!agregarEvento: unEvento AAccion:unaAccion 	unaAccion agregarEventos:unEvento.	 ! !!CuOOra methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 4/21/2019 16:35'!agregarUsuario:anotherUser comoFollowerDe: aUser	anotherUser  agregarUsuarioFollowerDeOtro:aUser.	! !!CuOOra methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 4/25/2019 15:16'!obtenerPreguntasRealizadasPor: unUsuario	^unUsuario preguntasRealizadas 		 ! !!CuOOra methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 4/22/2019 17:49'!crearNuevoUsuario: aUserName password: aPassword	"Recibe una nombre de usuario y una contraseña"	"| usuario |	usuario := Usuario nuevoUsusario: aUserName conPassword: aPassword.	self usuarios add: usuario.	^ usuario"		^self usuarios add: (Usuario nuevoUsusario: aUserName conPassword: aPassword).! !!CuOOra methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 4/25/2019 15:09'!obtenerRespuestasDeUnaPregunta: unaPregunta"Se indica la pregunta y se retornan todas las respuestas ordenadas por cantidad de likes de mayor a menor."	^self usuarios collect:[ :unUsuario | unUsuario obtenerRespuestasDe: unaPregunta ]		 ! !!CuOOra methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 4/27/2019 16:08'!obtenerTodasLasPreguntasDeUnTopico:unTopico"se indica un tópico y debenretornarse todas las preguntas que se realizaron y pertenecen a ese tópico"	"^self usuarios flatCollect: [:usu | usu obtenerPreguntasDeUnTopico: unTopico] ."	^unTopico preguntasTopico ! !!CuOOra methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 4/27/2019 17:16'!obtenerRespuestasRealizadasPor: unUsuario	^unUsuario respuestasRealizadas.		 ! !!CuOOra methodsFor: 'as yet unclassified' stamp: 'vs 4/29/2019 15:26'!agregarTopicos:aName y:aDescrip"Agrega tópicos indicando su nombre y descripción"    |t|	  t:= Topico crearTopico:aName y: aDescrip.   self topicosSistema  add: t.	^t.		! !!CuOOra methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 4/22/2019 18:18'!agregarRespuesta:unaRespuesta de:unaPregunta deUser:aUser "Agrega una respuesta indicando la pregunta que se responde, el texto de la respuesta, hora y fecha de creación. Debe registrarse el usuario que la realiza."    ^(aUser agregarRespuestaALaColeccion:unaRespuesta de:unaPregunta deUser: aUser).		 ! !!CuOOra methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 4/27/2019 18:31'!obtenerPreguntasRelevantesPara: unUsuario"Se considera relevante una pregunta cuando ésta pertenece a un tópico de interés para el usuario en cuestión o bien cuando fue realizada por alguno de los usuarios que sigue en la red social"	"^self usuarios do:[:usu | usu preguntasDeUnTopico: (unUsuario topicosFavoritos)]."	^ unUsuario dameTusPreguntasRelevantes.! !!CuOOra methodsFor: 'accessing' stamp: 'FirstnameLastname 4/27/2019 17:05'!topicosSistema	^ topicosSistema! !!CuOOra methodsFor: 'accessing' stamp: 'cathy 5/7/2019 17:50'!todasLasPreguntas	 ^self usuarios flatCollect:[:u |u dameTusPreguntas].! !!CuOOra methodsFor: 'accessing' stamp: 'cathy 5/7/2019 18:41'!preguntasDelSistema	|c|	c:= usuarios seguidores flatCollect: [:seg | seg preguntasRealizadas ].! !!CuOOra methodsFor: 'accessing' stamp: 'cathy 5/6/2019 12:29'!cleanup	usuarios = Set new.	topicosSistema = Set new.! !!CuOOra methodsFor: 'accessing' stamp: 'FirstnameLastname 4/15/2019 18:35'!nombre	^ nombre! !!CuOOra methodsFor: 'accessing' stamp: 'FirstnameLastname 4/27/2019 17:05'!usuarios: anObject	usuarios := anObject! !!CuOOra methodsFor: 'accessing' stamp: 'FirstnameLastname 4/27/2019 17:05'!topicosSistema: anObject	topicosSistema := anObject! !!CuOOra methodsFor: 'accessing' stamp: 'Anonymous 4/4/2019 19:18'!usuarios	^ usuarios! !!CuOOra methodsFor: 'accessing' stamp: 'Anonymous 4/7/2019 10:37'!borrarUnaPregunta: unaPregunta" elimina del sistema la pregunta y todas sus respuestas."	self usuarios collect:[ :unUsuario | unUsuario obtenerLasRespuestasDeUnaPregunta: unaPregunta ]! !!CuOOra methodsFor: 'accessing' stamp: 'FirstnameLastname 4/15/2019 18:35'!nombre: anObject	nombre := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CuOOra class	instanceVariableNames: 'singleton'!!CuOOra class methodsFor: 'instance creation' stamp: 'FirstnameLastname 4/15/2019 18:25'!named: unNombre	^ self new nombre: unNombre ! !!CuOOra class methodsFor: 'instance creation' stamp: 'FirstnameLastname 4/21/2019 11:41'!singleton	^ singleton 		ifNil: [ singleton := self named: 'CuOOraApp' ]		ifNotNil: [ singleton]		"| tmp1 |	tmp1 := singleton.	^ tmp1		ifNil: [ singleton := self named: 'SistemaDeTarea' ]		ifNotNil: [ tmp1 ]"! !Object subclass: #Evento	instanceVariableNames: 'nombreEvento fechaEvento soyLike'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-OO2-modelo'!!Evento commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Evento methodsFor: 'initialization' stamp: 'FirstnameLastname 4/23/2019 09:21'!initialize: unNombre 	nombreEvento := unNombre .	fechaEvento := Date today  .	soyLike := ''.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Evento class	instanceVariableNames: ''!!Evento class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 4/23/2019 09:21'!crearEvento: unNombre 	^(self new initialize: unNombre )! !Evento subclass: #Dislike	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-OO2-modelo'!!Dislike commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Dislike methodsFor: 'initialize' stamp: 'FirstnameLastname 4/22/2019 18:49'!initialize	super initialize.	soyLike := false.! !Evento subclass: #Like	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-OO2-modelo'!!Like commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Like methodsFor: 'initialize' stamp: 'FirstnameLastname 4/22/2019 18:50'!initialize	super initialize.	soyLike := true.! !Accion subclass: #Pregunta	instanceVariableNames: 'topicosPregunta tituloPregunta descripcionPregunta respuestas'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-OO2-modelo'!!Pregunta commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	descripcion:		<Object>	titulo:		<Object>	topicos:		<Object>    Implementation Points!!Pregunta methodsFor: 'Accessing' stamp: 'FirstnameLastname 4/25/2019 18:32'!agregarTopicoAPregunta:aTopicos  self topicosPregunta addAll:aTopicos.! !!Pregunta methodsFor: 'initialize' stamp: 'vs 4/29/2019 15:47'!initialize:aTitle deUser: aUser yDescrip:aDescrip conTopicos: unosTopicossuper initialize: aUser.tituloPregunta := aTitle.descripcionPregunta := aDescrip .esPregunta := true.topicosPregunta := unosTopicos.respuestas := OrderedCollection new.    ! !!Pregunta methodsFor: 'accessing' stamp: 'Anonymous 4/6/2019 13:13'!titulo	^ tituloPregunta ! !!Pregunta methodsFor: 'accessing' stamp: 'FirstnameLastname 4/15/2019 16:55'!topicosPregunta	^ topicosPregunta ! !!Pregunta methodsFor: 'accessing' stamp: 'FirstnameLastname 4/27/2019 17:21'!esPregunta	^true.! !!Pregunta methodsFor: 'accessing' stamp: 'FirstnameLastname 4/22/2019 18:07'!agregarRespuesta: unaRespuesta	^self respuestas add: unaRespuesta ! !!Pregunta methodsFor: 'accessing' stamp: 'FirstnameLastname 4/25/2019 18:18'!eliminarTodasLasRespuestas	self respuestas removeAll.! !!Pregunta methodsFor: 'accessing' stamp: 'Anonymous 4/7/2019 10:14'!obtenerTodasLasRespuestas	self respuestas! !!Pregunta methodsFor: 'accessing' stamp: 'cathy 5/6/2019 17:54'!topicosPregunta: anObject	topicosPregunta := anObject! !!Pregunta methodsFor: 'accessing' stamp: 'cathy 5/6/2019 17:54'!respuestas: anObject	respuestas := anObject! !!Pregunta methodsFor: 'accessing' stamp: 'Anonymous 4/6/2019 13:13'!titulo: anObject	tituloPregunta  := anObject! !!Pregunta methodsFor: 'accessing' stamp: 'Anonymous 4/6/2019 13:13'!descripcion	^ descripcionPregunta ! !!Pregunta methodsFor: 'accessing' stamp: 'Anonymous 4/5/2019 17:11'!respuestas	^ respuestas ! !!Pregunta methodsFor: 'accessing' stamp: 'FirstnameLastname 4/25/2019 18:30'!topicoBuscado: unTopico	^self topicosPregunta includes: unTopico.! !!Pregunta methodsFor: 'accessing' stamp: 'Anonymous 4/6/2019 13:13'!descripcion: anObject	descripcionPregunta := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Pregunta class	instanceVariableNames: ''!!Pregunta class methodsFor: 'instance creation' stamp: 'FirstnameLastname 4/22/2019 17:58'!crearPregunta:aTitle deUser: aUser yDescrip:aDescrip conTopicos: unosTopicos	^self new initialize:aTitle deUser: aUser yDescrip:aDescrip conTopicos: unosTopicos.! !Accion subclass: #Respuesta	instanceVariableNames: 'textoRespuesta'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-OO2-modelo'!!Respuesta commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Respuesta methodsFor: 'Accessing' stamp: 'Anonymous 4/7/2019 10:13'!obtenerTodasLasRespuestas	! !!Respuesta methodsFor: 'Accessing' stamp: 'FirstnameLastname 4/27/2019 17:22'!esPregunta	^false.	! !!Respuesta methodsFor: 'Accessing' stamp: 'FirstnameLastname 4/25/2019 18:08'!topicoBuscado: unTopico	^false! !!Respuesta methodsFor: 'Accessing' stamp: 'Anonymous 4/7/2019 10:42'!eliminarTodasLasRespuestas	! !!Respuesta methodsFor: 'accessing' stamp: 'cathy 5/6/2019 13:23'!textoRespuesta	^ textoRespuesta! !!Respuesta methodsFor: 'accessing' stamp: 'cathy 5/6/2019 13:23'!textoRespuesta: anObject	textoRespuesta := anObject! !!Respuesta methodsFor: 'initialization' stamp: 'FirstnameLastname 4/22/2019 18:29'!initialize: unaRespuesta deUser:aUser	super initialize:aUser.	textoRespuesta := unaRespuesta .	esPregunta := false.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Respuesta class	instanceVariableNames: ''!!Respuesta class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 4/22/2019 18:00'!crearRespuesta: unaRespuesta deUser: aUser	^self new initialize: unaRespuesta deUser: aUser.! !Object subclass: #Topico	instanceVariableNames: 'nombreTopico descripcionTopico preguntasTopico'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-OO2-modelo'!!Topico commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	descripcion:		<Object>	nombre:		<Object>    Implementation Points!!Topico methodsFor: 'as yet unclassified' stamp: 'vs 4/29/2019 15:53'!agregarPreg: unaPregunta	self preguntasTopico add:unaPregunta.! !!Topico methodsFor: 'initialize' stamp: 'FirstnameLastname 4/27/2019 16:08'!crearNuevoTopico:aName y:aDescrip nombreTopico :=aName. descripcionTopico  :=aDescrip. preguntasTopico := OrderedCollection new.	! !!Topico methodsFor: 'accessing' stamp: 'FirstnameLastname 4/25/2019 18:24'!descripcionTopico	^ descripcionTopico! !!Topico methodsFor: 'accessing' stamp: 'vs 4/29/2019 15:58'!preguntasTopico	^preguntasTopico! !!Topico methodsFor: 'accessing' stamp: 'FirstnameLastname 4/25/2019 18:24'!nombreTopico	^ nombreTopico! !!Topico methodsFor: 'accessing' stamp: 'FirstnameLastname 4/27/2019 16:07'!preguntasTopico: anObject	preguntasTopico := anObject! !!Topico methodsFor: 'accessing' stamp: 'FirstnameLastname 4/25/2019 18:24'!descripcionTopico: anObject	descripcionTopico := anObject! !!Topico methodsFor: 'accessing' stamp: 'FirstnameLastname 4/25/2019 18:24'!nombreTopico: anObject	nombreTopico := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Topico class	instanceVariableNames: ''!!Topico class methodsFor: 'initialization' stamp: 'cathy 4/3/2019 17:15'!crearTopico:aName y:aDescrip  ^self new crearNuevoTopico: aName y:aDescrip.! !Object subclass: #Usuario	instanceVariableNames: 'nombreUsuario passwordUsuario fechaUsuario horaUsuario seguidores acciones topicosFavoritos'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-OO2-modelo'!!Usuario commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	fecha:		<Object>	hora:		<Object>	nombre:		<Object>	password:		<Object>    Implementation Points!!Usuario methodsFor: 'initialize' stamp: 'Anonymous 4/6/2019 13:18'!crearNuenoUsuario:aUserName yPassword:aPass	nombreUsuario  := aUserName.	passwordUsuario  := aPass.	seguidores:=OrderedCollection  new.	acciones:= OrderedCollection new.	topicosFavoritos := OrderedCollection new.	fechaUsuario := Date today.	horaUsuario :=DateAndTime .		! !!Usuario methodsFor: 'accessing' stamp: 'cathy 5/6/2019 17:49'!passwordUsuario: anObject	passwordUsuario := anObject! !!Usuario methodsFor: 'accessing' stamp: 'FirstnameLastname 4/21/2019 14:00'!acciones: anObject	acciones := anObject! !!Usuario methodsFor: 'accessing' stamp: 'cathy 5/6/2019 17:49'!horaUsuario: anObject	horaUsuario := anObject! !!Usuario methodsFor: 'accessing' stamp: 'FirstnameLastname 4/23/2019 08:19'!agregarRespuestaALaColeccion:unaRespuesta de:unaPregunta deUser: aUser |respuesta|  respuesta := (Respuesta crearRespuesta: unaRespuesta deUser: aUser).		unaPregunta agregarRespuesta: respuesta .	self acciones add:respuesta.	^respuesta 	! !!Usuario methodsFor: 'accessing' stamp: 'cathy 5/6/2019 17:49'!passwordUsuario	^ passwordUsuario! !!Usuario methodsFor: 'accessing' stamp: 'cathy 5/6/2019 17:49'!seguidores: anObject	seguidores := anObject! !!Usuario methodsFor: 'accessing' stamp: 'cathy 5/6/2019 17:49'!fechaUsuario: anObject	fechaUsuario := anObject! !!Usuario methodsFor: 'accessing' stamp: 'cathy 5/6/2019 17:52'!isUser:aName pass:pass	^(nombreUsuario =aName & passwordUsuario = pass)! !!Usuario methodsFor: 'accessing' stamp: 'cathy 4/3/2019 18:21'!seguidores	^ seguidores! !!Usuario methodsFor: 'accessing' stamp: 'FirstnameLastname 4/21/2019 14:00'!nombreUsuario	^ nombreUsuario! !!Usuario methodsFor: 'accessing' stamp: 'cathy 5/6/2019 17:49'!topicosFavoritos: anObject	topicosFavoritos := anObject! !!Usuario methodsFor: 'accessing' stamp: 'cathy 5/6/2019 17:49'!horaUsuario	^ horaUsuario! !!Usuario methodsFor: 'accessing' stamp: 'cathy 5/6/2019 17:49'!fechaUsuario	^ fechaUsuario! !!Usuario methodsFor: 'accessing' stamp: 'cathy 4/4/2019 17:55'!topicosFavoritos	^ topicosFavoritos! !!Usuario methodsFor: 'accessing' stamp: 'cathy 4/3/2019 18:21'!acciones	^ acciones! !!Usuario methodsFor: 'accessing' stamp: 'FirstnameLastname 4/21/2019 14:00'!nombreUsuario: anObject	nombreUsuario := anObject! !!Usuario methodsFor: 'Accessing' stamp: 'Anonymous 4/7/2019 10:33'!obtenerRespuestasDe: unaPregunta		(self estaLaPregunta: unaPregunta)	ifTrue: [ (self buscarLaPregunta: unaPregunta) obtenerTodasLasRespuestas ].! !!Usuario methodsFor: 'Accessing' stamp: 'FirstnameLastname 4/27/2019 17:22'!respuestasRealizadas	"Obtiene las respuestas realizadas por un usuario"	^self acciones select: [:unaAccion | unaAccion esPregunta = false]! !!Usuario methodsFor: 'Accessing' stamp: 'FirstnameLastname 4/25/2019 14:42'!estaLaPregunta: unaPregunta	^self acciones includes: [ :unaAccion | unaAccion = unaPregunta ]! !!Usuario methodsFor: 'Accessing' stamp: 'FirstnameLastname 4/23/2019 08:17'!agregarPreguntaALaColeccion:unaPregunta deUser: aUser conDescrip: aDescrip conTopicos: unosTopicos "Acciones puede ser una pregunta o respuestas"		 ^self acciones add: (Pregunta crearPregunta: unaPregunta deUser: aUser yDescrip:aDescrip conTopicos: unosTopicos). 		! !!Usuario methodsFor: 'Accessing' stamp: 'cathy 5/6/2019 13:23'!preguntasRealizadas	"Obtiene las preguntas realizadas por un usuario"	^self acciones select: [:unaAccion | unaAccion esPregunta].! !!Usuario methodsFor: 'Accessing' stamp: 'cathy 5/6/2019 19:56'!obtenerPreguntasRelevantes 	"self topicosFavoritos do:[:unTopico | unTopico preguntasDeUnTopico: self ].	self seguidores do:[:unSeguidor | unSeguidor  preguntasRealizadas ]	"	! !!Usuario methodsFor: 'Accessing' stamp: 'FirstnameLastname 4/27/2019 17:47'!agregarPreguntaALaColeccion:unaPregunta	^self acciones add:unaPregunta. 		! !!Usuario methodsFor: 'Accessing' stamp: 'Anonymous 4/7/2019 10:36'!obtenerLasRespuestasDeUnaPregunta: unaPregunta		(self estaLaPregunta: unaPregunta)	ifTrue: [ (self buscarLaPregunta: unaPregunta) eliminarTodasLasRespuestas ].! !!Usuario methodsFor: 'Accessing' stamp: 'Anonymous 4/7/2019 10:33'!buscarLaPregunta: unaPregunta	^(self acciones detect: [ :unaAccion | unaAccion = unaPregunta ])! !!Usuario methodsFor: 'Accessing' stamp: 'cathy 5/7/2019 17:58'!dameTusPreguntas	^acciones select: [ : a| a esPregunta]. 		! !!Usuario methodsFor: 'Accessing' stamp: 'Anonymous 4/5/2019 16:33'!agregarAcciones:unaAccion con: aDescrip		 acciones add:unaAccion. 		! !!Usuario methodsFor: 'Accessing' stamp: 'FirstnameLastname 4/27/2019 18:23'!damePreguntasDeMisTopicosInteres	^self topicosFavoritos flatCollect: [ : top | top preguntasTopico ]. 		! !!Usuario methodsFor: 'Accessing' stamp: 'FirstnameLastname 4/23/2019 09:26'!agregarTopicoInteres:aTopic   ^self topicosFavoritos add:aTopic. 		! !!Usuario methodsFor: 'Accessing' stamp: 'cathy 5/7/2019 18:05'!dameTusPreguntasRelevantes	^(self damePreguntasDeMisTopicosInteres , self damePreguntasDeMisSeguidores) asSet.	 		! !!Usuario methodsFor: 'Accessing' stamp: 'Anonymous 4/6/2019 13:38'!agregarUsuarioFollowerDeOtro:aUser	self seguidores add: aUser. 		! !!Usuario methodsFor: 'Accessing' stamp: 'FirstnameLastname 4/27/2019 18:26'!damePreguntasDeMisSeguidores		^self seguidores flatCollect: [ :seg | seg preguntasRealizadas  ].	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Usuario class	instanceVariableNames: ''!!Usuario class methodsFor: 'as yet unclassified' stamp: 'cathy 4/3/2019 17:11'!nuevoUsusario: aName conPassword:aPass	^self new crearNuenoUsuario: aName yPassword: aPass.! !TestCase subclass: #TestCuOOra	instanceVariableNames: 'cuoora user topic usuario1 usuario2 usuario3 m ma tp tc pepe preg1 preg2'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-OO2-test'!!TestCuOOra methodsFor: 'Accessing' stamp: 'cathy 5/6/2019 13:37'!testPreguntasRelevantes	|c|	c:= cuoora obtenerPreguntasRelevantesPara: usuario1.		self assert: c size = 1.! !!TestCuOOra methodsFor: 'Accessing' stamp: 'cathy 5/10/2019 15:07'!testObtenerRespuestasRealizadasPorUnUsuario	self assert: (cuoora obtenerRespuestasRealizadasPor: usuario2) size equals: 1.		! !!TestCuOOra methodsFor: 'Accessing' stamp: 'cathy 5/6/2019 12:33'!testCrearNuevaPregunta		self assert: ((cuoora obtenerPreguntasRealizadasPor: usuario1)detect: [ :q | q titulo = '¿Como hacer Milanesas?' ])notNil.			! !!TestCuOOra methodsFor: 'Accessing' stamp: 'cathy 5/6/2019 13:33'!testAgregarTopicoDeInteresParaUnUsuario"	self assert: ((cuoora obtenerRespuestasRealizadasPor: usuario2)detect: [ :r | r textoRespuesta = 'Con pollo' ])notNil.		self assert: ( ((cuoora getUser: 'matias') interests detect: [:i | i name='programacion'] )notNil ).		"! !!TestCuOOra methodsFor: 'Accessing' stamp: 'cathy 5/7/2019 18:20'!testDamePreguntasUsuario				| c |	c:=usuario1 dameTusPreguntas.		self assert: c size equals:1.	! !!TestCuOOra methodsFor: 'Accessing' stamp: 'cathy 4/7/2019 19:17'!testCrearNuevoUsuario	cuoora crearNuevoUsuario: 'Juan' password: '1234'.	self assert: cuoora usuarios size equals: 1.! !!TestCuOOra methodsFor: 'Accessing' stamp: 'cathy 5/7/2019 18:32'!testPreguntasDeMisSeguidores	|c|	c:= usuario1 seguidores flatCollect: [:seg | seg preguntasRealizadas ].		self assert: c size = 1.! !!TestCuOOra methodsFor: 'Accessing' stamp: 'cathy 5/10/2019 14:58'!testAgregarRespuesta		self assert: ((cuoora obtenerRespuestasRealizadasPor: usuario2)detect: [ :r | r textoRespuesta = 'Con pollo' ])notNil.			! !!TestCuOOra methodsFor: 'Accessing' stamp: 'cathy 5/10/2019 15:10'!testObtenerRespuestasDeUnaPregunta		self assert: (cuoora obtenerTodasLasPreguntasDeUnTopico:tc) size = 1.! !!TestCuOOra methodsFor: 'Accessing' stamp: 'cathy 5/7/2019 18:30'!setUp  "cuoora:= CuOOra new.  user := cuoora crearNuevoUsuario: 'cathy' password: '1234'. topic := Topico crearTopico:'OO1' y:'This topic is for discussing about OO1 issues'.""super setUp."		cuoora:= CuOOra new.	cuoora cleanup.	usuario1:= cuoora crearNuevoUsuario: 'cathy' password: '1234'.   	usuario2:=cuoora crearNuevoUsuario: 'sandra' password: '123'.	usuario3:=cuoora  crearNuevoUsuario:  'pepito' password: '123'.	cuoora agregarUsuario:usuario1 comoFollowerDe: usuario2.		tp:=cuoora agregarTopicos:'Topico' y:'UnTopico es una caracteristica'.	tc:= cuoora agregarTopicos:'Cocina' y:'Recetas Espectaculares'.		cuoora agregarTopicoInteresAUsuario:usuario1  con:tp.	cuoora agregarTopicoInteresAUsuario:usuario2  con:tc.		cuoora agregarUsuario:usuario1 comoFollowerDe: usuario3.	preg1:= cuoora agregarPregunta:'¿Como hacer Milanesas?' de:usuario1  conDescrip: 'Son riquisimas' 	conTopicos:(OrderedCollection  with: tc).	cuoora agregarRespuesta:'Con pollo' de:preg1 deUser:usuario2.	preg2:= cuoora agregarPregunta:'¿Que es GOT?' de:usuario2  conDescrip: 'Mirenla' conTopicos:(OrderedCollection  with: tp).	! !!TestCuOOra methodsFor: 'Accessing' stamp: 'cathy 5/10/2019 15:13'!testObtenerTodasLasPreguntasDeUnTopico		self assert: (cuoora obtenerTodasLasPreguntasDeUnTopico:tc) size = 1.! !!TestCuOOra methodsFor: 'Accessing' stamp: 'cathy 5/6/2019 13:42'!testAgregarTopico	cuoora agregarTopicos:'Topico' y:'UnTopico es una caracteristica'.	self assert: cuoora topicosSistema  size equals: 3.	! !TestCase subclass: #TestPregunta	instanceVariableNames: 'preg cuoora'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-OO2-test'!!TestPregunta methodsFor: 'Accessing' stamp: 'cathy 5/4/2019 19:57'!setUp  preg := Pregunta new.! !!TestPregunta methodsFor: 'Accessing' stamp: 'cathy 5/4/2019 19:56'!testCrearNuevaPregunta		|user topic topico|	user :=cuoora crearNuevoUsuario: 'cathy' password: '1234'.	topic := Topico crearTopico:'OO1' y:'This topic is for discussing about OO1 issues'.	topico:=OrderedCollection new.	topico add:topic.		cuoora agregarPregunta:'¿Que es?' de:user conDescrip:'lalala' conTopicos:topico.	self assert: cuoora .					! !